apiVersion: apps/v1
kind: Deployment
metadata:
  name: dotnet-app
spec:
  selector:
    matchLabels:
      name: dotnet-app
  replicas: 1
  template:
    metadata:
      labels:
        name: dotnet-app
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: appd-account
      initContainers:
      - name: appd-agent
        command:
          - cp
          - -r
          - /opt/appdynamics/.
          - /opt/appd
        image: sashaz/dotnet:20.7.0
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /opt/appd
          name: appd-agent-repo
      containers:
      - name: dotnet-app
        image: microsoft/dotnet-samples:aspnetapp
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "export APPDYNAMICS_AGENT_UNIQUE_HOST_ID=$(sed -rn '1s#.*/##; 1s/(.{12}).*/\\1/p' /proc/self/cgroup) && dotnet aspnetapp.dll"]
        # command: ["/bin/sh"]
        # args: ["-c", "/opt/appd/prep.sh && dotnet aspnetapp.dll"]
        envFrom:
           - configMapRef:
              name: dotnet-config
        env:
          - name: APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY
            valueFrom:
                secretKeyRef:
                  name: appd-secret
                  key: appd-key
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /opt/appd
          name: appd-agent-repo
        - name: appd-agent-config
          mountPath: /opt/appd/AppDynamicsConfig.json
          subPath: AppDynamicsConfig.json
      restartPolicy: Always
      volumes:
        - name: appd-agent-repo
          emptyDir: {}
        - name: appd-agent-config
          configMap:
            name: appd-config
---
apiVersion: v1
kind: Service
metadata:
  name: dotnet-app
spec:
  selector:
    name: dotnet-app
  ports:
  - name: "80"
    port: 80
    targetPort: 80
  type: NodePort